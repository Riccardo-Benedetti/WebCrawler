package sd1516.webcrawler.utils;

/**
 * DISTRIBUTED, FAULT-TOLERANT WEB CRAWLING WITH RASPI
 * 
 * @page https://apice.unibo.it/xwiki/bin/view/Courses/Sd1516Projects-CrawlingRaspiRamilliBenedetti
 * 
 * @author Riccardo Benedetti & Elisabetta Ramilli
 * @email riccardo.benedetti3@studio.unibo.it
 * @email elisabetta.ramilli@studio.unibo.it
 * 
 * Alma Mater Studiorum - Università di Bologna
 * Laurea Magistrale in Ingegneria e Scienze Informatiche
 * (Corso di Sistemi Distribuiti - Prof. Andrea Omicini & Stefano Mariani)
 * 
 */

import alice.tuprolog.Term;

/*
 * This utility is needed to build valid LogicTuples.
 * A LogicTuple is valid if has a ' char at the beginning and another at the end but NO ONE IN THE MIDDLE. 
 * The first encodes the LogicTuple replacing all possible ' chars in the middle with the "!CH39!" string.
 * The second make the opposite, decoding the "!CH39!" strings back to ' char.
*/
public class ValidTermFactory {

	private ValidTermFactory(){};
	
	/*
	 * Given a specific string, obtain the corresponding Term to use to build a valid LogicTuple
	 */
	public static Term getTermByString(String s){
		Term t = null;
		
		// if the string (publication title or url) contains a "!CH39!" strings we will raise white flag :)
		if(s.contains("!CH39!")){
			throw new IllegalArgumentException();
		}
		
		if((s.charAt(0) == (char)39) && s.charAt(s.length()-1) == (char)39){ // if first and last chars are '... 
			s = s.substring(1, s.length()-1); // ...then get the internal substring
		}
		
		s = s.replaceAll("'", "!CH39!"); // replace ' chars in the middle with the "!CH39!" string
		s = s.replaceAll("\n", " ");
		t = Term.createTerm("'"+s+"'"); // build the valid Term
		
		return t;
	}
	
	/*
	 * Given a specific valid Term, decode it obtaining the corresponding string
	 */
	public static String getStringByTerm(Term t){
		String s = t.toString(); // convert Term to a "dirty" string
		if((s.charAt(0) == '[') && s.charAt(s.length()-1) == ']'){ // if first and last chars are [ and ]...
			s = s.substring(1, s.length()-1); // ...then get the internal substring
		}
		
		if( ( s.charAt(0) == (char)39 ) && ( s.charAt(s.length()-1) == (char)39 ) ){ // if first and last chars are '... 
			s = s.substring(1, s.length()-1); // ...then get the internal substring
		}
		
		
		if(s.contains("!CH39!")){ // if the string contains the substring "!CH39!" (generated by the previous method)...
			s = s.replaceAll("!CH39!", ""+(char)39); // ...then replace it with ' chars
		}
		
		return s;
	}
}